[{"/home/gradjaku/Documents/3.21/Frontend/src/index.js":"1","/home/gradjaku/Documents/3.21/Frontend/src/App.js":"2","/home/gradjaku/Documents/3.21/Frontend/src/components/Notification.js":"3","/home/gradjaku/Documents/3.21/Frontend/src/services/entries.js":"4","/home/gradjaku/Documents/3.21/Frontend/src/components/Entry.js":"5"},{"size":153,"mtime":1689871953000,"results":"6","hashOfConfig":"7"},{"size":3567,"mtime":1689875593698,"results":"8","hashOfConfig":"7"},{"size":187,"mtime":1689871953000,"results":"9","hashOfConfig":"7"},{"size":644,"mtime":1689875667156,"results":"10","hashOfConfig":"7"},{"size":264,"mtime":1689875629791,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"61rok1",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/gradjaku/Documents/3.21/Frontend/src/index.js",[],[],"/home/gradjaku/Documents/3.21/Frontend/src/App.js",["29","30","31","32","33"],[],"import { useState, useEffect } from 'react'\nimport Entry from './components/Entry'\nimport Notification from './components/Notification'\nimport entryService from './services/entries'\n\nconst App = () => {\n  const [entries, setEntries] = useState([\n  {\n      \"name\": \"Arto Hellas\",\n      \"number\": \"040-123456\",\n      \"id\": 1\n    }\n  ])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    entryService\n      .getAll()\n      .then(initialEntries => {\n        setEntries(initialEntries)\n      })\n  }, [])\n\n  const addEntry = (event) => {\n    event.preventDefault()\n\n    const entryObject = {\n      name: newName,\n      number: newNumber,\n    }\n\n    if(entries.find(entry => entry.name === newName)) {\n      console.log(\"Name already in database!\")\n      const entry = entries.find(entry => entry.name === newName)\n      const id = entry.id\n      entryService\n        .update(id, entryObject).then(returnedEntry => {\n          setEntries(entries.map(entry => entry.id !== id ? entry : returnedEntry))\n          setNewName('')\n          setNewNumber('')\n        })\n        .catch(error => {\n          const error_message = \"400 (Bad request). \" + error.response.data.error\n          setErrorMessage(\n            error_message\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n\n        })\n\n    } else {\n    entryService\n      .create(entryObject)\n        .then(returnedEntry => {\n        setEntries(entries.concat(returnedEntry))\n        setNewName('')\n      })\n      .catch(error => {\n        const error_message = \"400 (Bad request). \" + error.response.data.error\n        setErrorMessage(\n          error_message\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n        \n      \n\n    }\n  \n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n   const updateNumbdddder = id => {\n      const entry = entries.find(n => n.id === id)\n      const changedEntry = { ...entry, number: 2 }\n  \n      entryService\n        .update(id, changedEntry).then(returnedEntry => {\n          setEntries(entries.map(entry => entry.id !== id ? entry : returnedEntry))\n        })\n        .catch(error => {\n          setErrorMessage(\n            `Person '${entry.content}' was already removed from server`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n          setEntries(entries.filter(n => n.id !== id))\n        })\n    }\n\n    const deleteById = id => {\n      entryService\n        .deleteById(id).then(returnedEntry => {\n          console.log(\"Delete entry of id ${id}??\", returnedEntry);\n          setEntries(entries.filter(entry => entry.id != id))\n        })\n    }\n\n  return (\n    <div>\n      <Notification message={errorMessage} />\n      <ul>\n        <ul>\n          {entries.map(entry => \n            <Entry\n              key={entry.id}\n              entry={entry}\n              deleteById={() => deleteById(entry.id)}\n            />\n          )}\n        </ul>\n      </ul>\n      <form onSubmit={addEntry}>\n        <input placeholder=\"Name\" value={newName} onChange={handleNameChange} />\n        <input placeholder=\"Number\" value={newNumber} onChange={handleNumberChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App\n","/home/gradjaku/Documents/3.21/Frontend/src/components/Notification.js",[],[],"/home/gradjaku/Documents/3.21/Frontend/src/services/entries.js",["34"],[],"import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteById = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { \n  getAll, \n  create, \n  update,\n  deleteById\n}","/home/gradjaku/Documents/3.21/Frontend/src/components/Entry.js",[],[],{"ruleId":"35","severity":1,"message":"36","line":16,"column":10,"nodeType":"37","messageId":"38","endLine":16,"endColumn":17},{"ruleId":"35","severity":1,"message":"39","line":16,"column":19,"nodeType":"37","messageId":"38","endLine":16,"endColumn":29},{"ruleId":"35","severity":1,"message":"40","line":87,"column":10,"nodeType":"37","messageId":"38","endLine":87,"endColumn":26},{"ruleId":"41","severity":1,"message":"42","line":109,"column":23,"nodeType":"43","messageId":"44","endLine":109,"endColumn":51},{"ruleId":"45","severity":1,"message":"46","line":110,"column":55,"nodeType":"47","messageId":"48","endLine":110,"endColumn":57},{"ruleId":"49","severity":1,"message":"50","line":24,"column":1,"nodeType":"51","endLine":29,"endColumn":2},"no-unused-vars","'showAll' is assigned a value but never used.","Identifier","unusedVar","'setShowAll' is assigned a value but never used.","'updateNumbdddder' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration"]